#+TITLE: Emacs configuration

* Set personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Christoph Meier"
        user-mail-address "christoph.cm.meier@gmail.com")
#+END_SRC
* Package management

Use =use-package= to manage package usage

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (require 'bind-key)

  (setq use-package-always-ensure t)
#+END_SRC
* General Settings
  When using align-* functions, use number of spaces to align instead of tabs

  #+BEGIN_SRC emacs-lisp
    (setq align-to-tab-stop nil)
  #+END_SRC

  Delete trailing whitespace when saving a file

  #+BEGIN_SRC emacs-lisp
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
  #+END_SRC
* Utility functions

Define a bunch of helper functions

#+BEGIN_SRC emacs-lisp
    (defun find-file-as-sudo ()
      (interactive)
      (let ((file-name (buffer-file-name)))
        (when file-name
          (find-alternate-file (concat "/sudo::" file-name)))))

    (defun yank-pop-forwards (arg)
      (interactive "p")
      (yank-pop (- arg)))

    (defun calc-eval-region (arg)
      "Evaluate an expression in calc and communicate the result.

      If the region is active evaluate that, otherwise search backwards
      to the first whitespace character to find the beginning of the
      expression. By default, replace the expression with its value. If
      called with the universal prefix argument, keep the expression
      and insert the result into the buffer after it. If called with a
      negative prefix argument, just echo the result in the minibuffer."
      (interactive "p")
      (let (start end)
        (if (use-region-p)
            (setq start (region-beginning) end (region-end))
          (progn
            (setq end (point))
            (setq start (search-backward-regexp "\\s-\\|\n" 0 1))
            (setq start (1+ (if start start 0)))
            (goto-char end)))
        (let ((value (calc-eval (buffer-substring-no-properties start end))))
          (pcase arg
            (1 (delete-region start end))
            (4 (insert " = ")))
          (pcase arg
            ((or 1 4) (insert value))
            (-1 (message value))))))

  (require 'calc-bin)
  (defun calc-change-radix (arg x)
    "Convert the number before point or in active region to radix given by user.
     Input radix will be determined by prefix (0x, 0b or 0o) or given arg."
    (interactive "p
  nNew base: ")
    (let (start end)
      (if (use-region-p)
          (setq start (region-beginning) end (region-end))
        (progn
          (setq end (point))
          (setq start (search-backward-regexp "\\s-\\|\n" 0 1))
          (setq start (1+ (if start start 0)))
          (goto-char end)))
      (setq input-str (buffer-substring-no-properties start end))
      (if (string-match "^[0#]x" input-str) (setq in-base 16)
        (if (string-match "^[0#]o" input-str) (setq in-base 8)
          (if (string-match "^[0#]b" input-str) (setq in-base 2)
            (if (= arg 1) (setq in-base 10)
              (setq in-base arg)))))
      (setq input-str (replace-regexp-in-string "^[0#][xob]" "" input-str))
      (let ((value
             (let ((calc-number-radix x)) (math-format-radix (string-to-number input-str in-base)))))
        (delete-region start end)
        (pcase x
          (2 (insert "0b"))
          (8 (insert "0o"))
          (16 (insert "0x")))
        (insert value))))
#+END_SRC

Enable keybindings for those functions

#+BEGIN_SRC emacs-lisp
  (global-set-key "\M-Y" 'yank-pop-forwards)
  (global-set-key (kbd "C-=") 'calc-eval-region)
  (global-set-key (kbd "C-+") 'calc-change-radix)
#+END_SRC
* UI settings
** Disable extra window stuff

Disable toolbar, menubar and scrollbars

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (tool-bar-mode 0)
  (menu-bar-mode 1)
  (scroll-bar-mode -1)
#+END_SRC
** Use fancy symbols

Why not?

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC
** Load up a theme

Install or enable the color-theme-sanityinc-tomorrow package, and enable it

#+BEGIN_SRC emacs-lisp
  ;; Trust themes by default so it doesn't bother me when starting up
  (setq custom-safe-themes t)

  (use-package color-theme-sanityinc-tomorrow
    :config (color-theme-sanityinc-tomorrow-eighties))
#+END_SRC

Load or install =rainbow-delimiters= package to color parens by level

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
            (add-hook 'latex-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Customize the modeline
   #+BEGIN_SRC emacs-lisp
     (setq-default mode-line-format
      	     '("%e" mode-line-front-space
      	       ;; Standard info
      	       mode-line-mule-info
      	       mode-line-client
      	       mode-line-modified
      	       mode-line-remote
      	       mode-line-frame-identification
   	       mode-line-buffer-identification
   	       "%3 "
   	       mode-line-modes
   	       "%3 L%l C%c %3"
   	       mode-line-end-spaces
      	       ))
   #+END_SRC
** Fringe / Line number settings

Reserve 4 digits for line numbers, leading spaces with a pipe
as a spacer. Also remove the right fringe.

#+BEGIN_SRC emacs-lisp
;  (global-linum-mode)
  (setq linum-format "%4d")
  (set-fringe-mode '(1 . 1))
#+END_SRC
** Highlight the current line

=global-hl-line-mode= highlights the background color of the current line

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC

Use =hlinum= to highlight the current line number as well

#+BEGIN_SRC emacs-lisp
  (use-package hlinum
    :config (hlinum-activate))

  (set-face-background 'linum-highlight-face "#383838")
  (set-face-foreground 'linum-highlight-face "#9FC59F")
#+END_SRC
** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed and uncommitted
lines in repositories

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl)

  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
#+END_SRC
** Highlight parens
Highlight corresponding parens to that at point

#+BEGIN_SRC emacs-lisp
  (show-paren-mode)
  (set-face-background 'show-paren-match nil)
  (set-face-foreground 'show-paren-match nil)
  (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
#+END_SRC
** y-or-n everywhere

Disable annoying yes-or-no questions and replace with y-or-n

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Language major modes
** VHDL

Set VHDL preferences:
 - Date format DD.MM.YYYY
 - Enable electric mode
 - Enable stutter (.. -> =>)
 - Upcase enums
 - Use rising_edge
 - Use active-high, synchronous resets
 - Dont use array indexes in sensitivity list

#+BEGIN_SRC emacs-lisp
  (setq vhdl-date-format "%d.%m.%Y")

  (setq vhdl-electric-mode t)
  (setq vhdl-stutter-mode t)

  (setq vhdl-upper-case-enum-values t)

  ; Template settings
  (setq vhdl-clock-edge-condition (quote function))
  (setq vhdl-reset-active-high t)
  (setq vhdl-reset-kind (quote sync))

  ; Sensitivity list
  (setq vhdl-array-index-record-field-in-sensitivity-list nil)
#+END_SRC
** Python

Use elpy for python editing. This includes useful command such as C-c C-d, which opens the documentation for the
function at point.

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :config (elpy-enable))

#+END_SRC


Use pyenv
#+BEGIN_SRC emacs-lisp
  (use-package pyenv-mode
    :init
    (setenv "WORKON_HOME" "D:/ProgramData/Miniconda3/envs")
    :config
    (pyenv-mode))

#+END_SRC


Use iPython as interpreter
#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "ipython"
    python-shell-interpreter-arg "-i")
#+END_SRC
** Latex

Get auctex and enable spellchecking in tex files

#+BEGIN_SRC emacs-lisp
  (use-package tex-site
    :ensure auctex)
  (use-package latex-preview-pane)
  (add-hook 'tex-mode-hook
            #'(lamba () (setq ispell-parser 'tex)))
#+END_SRC

Enable call to Nomenclature first when compiling Latex

#+BEGIN_SRC emacs-lisp
  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list
                  '("Nomenclature" "makeindex %s.nlo -s nomentbl.ist -o %s.nls"
                    (lambda (name command file)
                      (TeX-run-compile name command file)
                      (TeX-process-set-variable file 'TeX-command-next TeX-command-default))
                    nil t :help "Create nomenclature file")))
#+END_SRC

Automatically parse file after writing it

#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
#+END_SRC

Always use =pdflatex= when compiling Latex documents.

#+BEGIN_SRC emacs-lisp
  (setq TeX-PDF-mode t)
#+END_SRC

Enable math handling and always set the current file as the main one.

#+BEGIN_SRC emacs-lisp
   (add-hook 'LaTeX-mode-hook
            (lambda ()
              (LaTeX-math-mode)
              (setq TeX-master nil)))
#+END_SRC

Set the default PDF reader to SumatraPDF

#+BEGIN_SRC emacs-lisp
  (setq TeX-view-style (quote (("^epsf$" "SumatraPDF.exe %f") ("." "yap -1 %dS %d"))))
#+END_SRC

Setup for Sumatra-Syncview

#+BEGIN_SRC emacs-lisp
  (setq TeX-output-view-style
      (quote
       (("^dvi$" "^pstricks$\\|^pst-\\|^psfrag$" "dvips %d -o && start %f")
        ("^dvi$" "." "yap -1 %dS %d")
        ("^pdf$" "." "SumatraPDF.exe -reuse-instance %o")
        ("^html?$" "." "start %o"))))
#+END_SRC
** Text

Turn on auto-fill for text modes

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 120)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (setq paragraph-start "\f\\|[ \t]*$\\|[ \t]*[-+*] ")
#+END_SRC
** Tcl
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.do\\'" . tcl-mode))
     (add-to-list 'auto-mode-alist '("\\.sdc\\'" . tcl-mode))
   #+END_SRC
** Arduino

Install and use =arduino-mode= package

#+BEGIN_SRC emacs-lisp
;;  (use-package arduino-mode)
#+END_SRC
** Web
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode)
   #+END_SRC
** Additional modes

Additional, rarely used modes

#+BEGIN_SRC emacs-lisp
  (use-package dts-mode)
  (use-package csv-mode)
#+END_SRC
* Org-Mode settings
** General
   In general, org-files are placed in the nextcloud to keep them synced across devices

   #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/org")
   #+END_SRC
** Org Agenda & Capture
   Define TODO keywords

   #+BEGIN_SRC emacs-lisp
     (setq org-todo-keywords
	   '((sequence "TODO(t)" "STARTED(s)" "REJECTED(r)" "DONE(d)")))

     (setq org-todo-keyword-faces
	   '(("TODO" . org-warning)
	     ("STARTED" . "green")
	     ("REJECTED" . (:foreground "red" :weight bold))
	     ("DONE" . (:foreground "green" :weight bold))
	     ))
   #+END_SRC

   Set a global key to quickly take notes, todos, etc. Every capture will be stored in ~/org/org.org. See below for some
   information on how to add recurring tasks etc.

   #+BEGIN_SRC emacs-lisp
	       (global-set-key (kbd "C-c c") 'org-capture)

	       (setq org-capture-templates
		     '(("t" "Task" entry (file+headline "~/org.org" "Tasks")
			"* TODO %^{Title}\n  SCHEDULED: %^{Schedule}t\n\n  %?\n\n  %i\n")
		       ("n" "Note" entry (file+headline "~/org.org" "Notes")
			"* Note: %^{Title}\n  %?\n  %i\n")
		       ("s" "Stuff" entry (file+headline "~/org.org" "Stuff")
			"* %^{Title}\n\n  %i\n  %?\n")))
   #+END_SRC

   To add a recurring task, use the task template and add a "repeater". This can be yearly, monthly, weekly, daily and
   hourly, using the y/w/m/d/h letters. To add an earlier reminder, add a second identifier after the repeater.

   #+BEGIN_SRC org
     ** TODO Weekly Status report!
        SCHEDULED: <2017-09-29 Fri +1w -3d>
   #+END_SRC

   Org agenda shows TODO tasks, appointments, etc. It loads this information from the master org-file in
   ~/org.org. C-c a can be used to see this week's overview. To see an overview over all TODOs in that file, use
   C-c t.

   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-files '("~/org.org"))

     (global-set-key (kbd "C-c a") 'org-agenda-list)
     (global-set-key (kbd "C-c t") 'org-todo-list)
   #+END_SRC

** Display preferences

Enable pretty bullets instead of asterisks

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config   (add-hook 'org-mode-hook
                        (lambda ()
                          (org-bullets-mode t))))
#+END_SRC

Use syntax highlighting in source code blocks and make TAB behave like the corresponding major mode

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

Use the current window instead of a new one for code editing

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** Exporting

Fix sub/superscripts

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-sub-superscripts '{})
#+END_SRC

Allow =babel= to evaluate code of given languages, don't ask before eval

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (dot . t)
     (python . t)
     (matlab . t)
     (makefile . t)
     (gnuplot . t)))

  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Associate the "dot" language with the =graphviz-dot= major mode

#+BEGIN_SRC emacs-lisp
  (use-package graphviz-dot-mode)
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+END_SRC

Enable smart quotes for exporting

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC

*** Reveal.js

    Enable and configure exporter for reveal.js (presentation framework). This needs internet access.
    For local support, download a copy of the reveal.js source and point org-reveal-root to it

    #+BEGIN_SRC emacs-lisp
      (use-package ox-reveal)

      (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
      (setq org-reveal-mathjax t)

      (use-package htmlize)
    #+END_SRC
*** HTML

Don't include footer in HTML exports

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC
*** PDF

Enable creation of PDFs with syntax-highlighted code blocks using the =minted= package.
This needs access to shell commands when exporting

#+BEGIN_SRC emacs-lisp
;  (setq org-latex-pdf-process
;        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
;          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
;          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

Include minted package in Latex exports

#+BEGIN_SRC emacs-lisp
;  (add-to-list 'org-latex-packages-alist '("" "minted"))
;  (setq org-latex-listings 'minted)
#+END_SRC
*** Bootstrap

    Get exporter for Twitter Bootstrap (fancy HTML)

    #+BEGIN_SRC emacs-lisp
      (use-package ox-twbs)
    #+END_SRC
*** Latex
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("scrreprt"
                 "\\documentclass{scrreprt}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
* Packages
** async
#+BEGIN_SRC emacs-lisp
  (use-package async)
#+END_SRC
** better-shell
   #+BEGIN_SRC emacs-lisp
     (use-package better-shell
         :bind (("C-'" . better-shell-shell)
                ("C-;" . better-shell-remote-open)))
   #+END_SRC
** ido

#+BEGIN_SRC emacs-lisp
  (use-package ido-completing-read+)
  (use-package ido-vertical-mode)
  (use-package flx-ido)

  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  (ido-ubiquitous-mode 1)
  (flx-ido-mode 1)
  (setq ido-create-new-buffer 'always)
  (ido-vertical-mode 1)
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
  (setq ido-use-faces nil)
#+END_SRC
** smex

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :config (smex-initialize))

  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+END_SRC
** COMMENT flyspell

Use flyspell in text buffers

#+BEGIN_SRC emacs-lisp
  (use-package flycheck)
  (use-package flycheck-pos-tip)

  (global-flycheck-mode)

  (with-eval-after-load 'flycheck
    (flycheck-pos-tip-mode))

  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC
** projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config (projectile-global-mode))
#+END_SRC
** avy and ace-window

Use =avy= to jump to specific lines or words, use ace-window to switch between windows

#+BEGIN_SRC emacs-lisp
  (use-package avy)

  (global-set-key (kbd "C-c SPC") 'avy-goto-char)
  (global-set-key (kbd "C-c C-SPC") 'avy-goto-line)

  (use-package avy-zap
    :config
    (global-set-key (kbd "M-z") 'avy-zap-to-char-dwim)
    (global-set-key (kbd "M-Z") 'avy-zap-up-to-char-dwim))

  (use-package ace-window)
  (global-set-key (kbd "M-p") 'ace-window)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
#+END_SRC
** expand-region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :config (global-set-key (kbd "C-c r") 'er/expand-region))
#+END_SRC
** multiple cursors

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors)

  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)      ;; Add a cursor to each line in an active region

  (global-set-key (kbd "C->") 'mc/mark-next-like-this)     ;; Mark next keyword in buffer
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this) ;; Mark previous in buffer
  (global-set-key (kbd "C-c m") 'mc/mark-all-like-this)    ;; Mark all keywords in buffer
#+END_SRC
** which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+END_SRC
** yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :init
      (yas-global-mode 1))
#+END_SRC
** transfer-sh
   Enables easy uploading of files to transfer.sh

#+BEGIN_SRC emacs-lisp
  (use-package transfer-sh)
#+END_SRC

** undo-tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :init
       (global-undo-tree-mode))
   #+END_SRC
** magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit)
     (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC
** gnuplot mode
   #+BEGIN_SRC emacs-lisp
     (use-package gnuplot-mode)
   #+END_SRC
** ebib
   #+BEGIN_SRC emacs-lisp
     (use-package ebib
       :config (setq ebib-bibtex-dialect 'biblatex))
   #+END_SRC

Enable delete-selection-mode

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<kp-decimal>") ",")
#+END_SRC

* Additional keybindings

#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings 'meta)

  (global-set-key (kbd "C-c i") 'imenu)
  (global-set-key [remap dabbrev-expand] 'hippie-expand)
#+END_SRC
* Initial state
   This shows the org agenda for the next 14 days when emacs starts up.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook '(lambda () (org-agenda-list) (delete-other-windows)))
   #+END_SRC
